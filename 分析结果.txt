Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    20                                           @profile
    21                                           def main():
    22
    23         1          6.0      6.0      0.0      def vsizeAlg(opAdd):
    24                                                   opAdd[:,4] = opAdd[:,0]/np.sum(opAdd[:,0]) + opAdd[:,1]/np.sum(opAdd[:,1])
    25
    26         1          4.0      4.0      0.0      def physizeAlg(cpu,mem):
    27                                                   return cpu+mem
    28
    29
    30         1          4.0      4.0      0.0      targetPM = None
    31         1          3.0      3.0      0.0      def buyPM(matPM): # 记录一下每次买的型号
    32                                                   return [[matPM[targetPM][CPU]/2,matPM[targetPM][MEM]/2],[matPM[targetPM][CPU]/2,matPM[targetPM][ME                              M]/2],set()]
    33
    34
    35
    36         1         63.0     63.0      0.0      with open("./training-1.txt", "r") as f:
    37                                                   # 读取物理机和虚拟机型号
    38         1         32.0     32.0      0.0          typePM = int(f.readline())
    39         1          4.0      4.0      0.0          matPM = dict()
    40         1          3.0      3.0      0.0          currMax = None
    41        81        241.0      3.0      0.0          for i in range(typePM):
    42        80        367.0      4.6      0.0              currLine = f.readline().strip("()\n").split(',')
    43        80        359.0      4.5      0.0              cpu, mem, price, maintain = int(currLine[1]), int(currLine[2]), int(currLine[3]), int(currLine                              [4])
    44        80        280.0      3.5      0.0              matPM[currLine[0]] = [cpu, mem, price, maintain]
    45        80        247.0      3.1      0.0              if currMax == None:
    46         1          4.0      4.0      0.0                  currMax = [currLine[0],physizeAlg(cpu,mem)]
    47        79        294.0      3.7      0.0              elif currMax[1] < physizeAlg(cpu,mem):
    48         3         12.0      4.0      0.0                  currMax = [currLine[0],physizeAlg(cpu,mem)]
    49         1          3.0      3.0      0.0          targetPM = currMax[0]
    50
    51         1          4.0      4.0      0.0          typeVM = int(f.readline())
    52         1          4.0      4.0      0.0          matVM = dict()
    53       801       2594.0      3.2      0.0          for i in range(typeVM):
    54       800       3608.0      4.5      0.0              currLine = f.readline().strip("()\n").split(',')
    55       800       3335.0      4.2      0.0              cpu, mem, node = int(currLine[1]), int(currLine[2]), int(currLine[3])
    56       800       2685.0      3.4      0.0              matVM[currLine[0]] = [cpu, mem, node]
    57
    58
    59                                                   # 创建第一个物理机
    60         1          4.0      4.0      0.0          vm2pm = dict()
    61         1          3.0      3.0      0.0          pm2vm = []
    62         1          4.0      4.0      0.0          numPM = len(pm2vm)
    63         1         10.0     10.0      0.0          pm2vm.append(buyPM(matPM))
    64
    65                                                   # 读取每天的信息并处理
    66         1          4.0      4.0      0.0          days = int(f.readline())
    67       801       2576.0      3.2      0.0          for i in range(days):
    68       800       8535.0     10.7      0.0              todayReq = int(f.readline())
    69       800       9933.0     12.4      0.0              opAdd = np.zeros((todayReq,6)) # cpu mem node vmID vsize index
    70       800       2517.0      3.1      0.0              opAddIndex = 0
    71       800       4139.0      5.2      0.0              opDel = np.zeros((todayReq,1))
    72       800       2476.0      3.1      0.0              opDelIndex = 0
    73                                                       # 读取本日请求
    74    136373     428615.0      3.1      0.0              for request in range(todayReq):
    75    135573     633102.0      4.7      0.1                  currLine = f.readline().strip("()\n").split(',')
    76    135573     446303.0      3.3      0.0                  op = currLine[0]
    77    135573     439158.0      3.2      0.0                  if op == 'add':
    78     80000     327280.0      4.1      0.0                      buyType, vmID = currLine[1].strip(), int(currLine[2])
    79     80000     561721.0      7.0      0.0                      opAdd[opAddIndex] = matVM[buyType] + [vmID,0,opAddIndex] # cpu mem node vmID vsize ind                              ex
    80     80000     294496.0      3.7      0.0                      opAddIndex += 1
    81
    82                                                           else:
    83     55573     262143.0      4.7      0.0                      opDel[opDelIndex] = int(currLine[1])
    84     55573     188463.0      3.4      0.0                      opDelIndex += 1
    85
    86                                                       # 删除
    87     56373     177207.0      3.1      0.0              for eachDel in range(opDelIndex):
    88     55573     201603.0      3.6      0.0                  vmID = opDel[eachDel,0]
    89     55573     261573.0      4.7      0.0                  pmvmMsg = vm2pm.pop(vmID)
    90     55573     213978.0      3.9      0.0                  pmIndex = pmvmMsg.pop(0)
    91     55573     187865.0      3.4      0.0                  if len(pmvmMsg) == 2:
    92     22349      99275.0      4.4      0.0                      pm2vm[pmIndex][NODE_A][CPU] += pmvmMsg[CPU]
    93     22349      87528.0      3.9      0.0                      pm2vm[pmIndex][NODE_A][MEM] += pmvmMsg[MEM]
    94     22349      88613.0      4.0      0.0                      pm2vm[pmIndex][NODE_B][CPU] += pmvmMsg[CPU]
    95     22349      85759.0      3.8      0.0                      pm2vm[pmIndex][NODE_B][MEM] += pmvmMsg[MEM]
    96                                                           else:
    97     33224     150871.0      4.5      0.0                      pm2vm[pmIndex][pmvmMsg[NODE]][CPU] += pmvmMsg[CPU]
    98     33224     130746.0      3.9      0.0                      pm2vm[pmIndex][pmvmMsg[NODE]][MEM] += pmvmMsg[MEM]
    99     55573     237395.0      4.3      0.0                  pm2vm[pmIndex][VMSET].remove(vmID)
   100
   101
   102
   103
   104
   105                                                       # 部署
   106       800      96518.0    120.6      0.0              vsizeAlg(opAdd) # 计算需求的尺寸
   107       800      34587.0     43.2      0.0              opAdd = opAdd[np.argsort(-opAdd[:, VSIZE])] # 将需求按尺寸降序排列
   108     80800     276389.0      3.4      0.0              for i in range(opAddIndex):
   109  56417962  185549098.0      3.3     15.5                  for j,eachPM in enumerate(pm2vm) :
   110  56416186  221002550.0      3.9     18.5                      if opAdd[i,NODE] == 0: # single node
   111  33465698  104333864.0      3.1      8.7                          whichNode = None
   112  33465698  202147806.0      6.0     16.9                          if physizeAlg(eachPM[NODE_A][CPU],eachPM[NODE_A][MEM]) <= physizeAlg(eachPM[NODE_B                              ][CPU],eachPM[NODE_B][MEM]):
   113  16750464   52967318.0      3.2      4.4                              whichNode = NODE_B
   114                                                                   else:
   115  16715234   52510583.0      3.1      4.4                              whichNode = NODE_A
   116  33465698  140561591.0      4.2     11.7                          if eachPM[whichNode][CPU] >= opAdd[i,CPU] and eachPM[whichNode][MEM] >= opAdd[i,ME                              M]:
   117     46807     253119.0      5.4      0.0                              eachPM[whichNode][CPU] -= opAdd[i,CPU]
   118     46807     197991.0      4.2      0.0                              eachPM[whichNode][MEM] -= opAdd[i,MEM]
   119     46807     299502.0      6.4      0.0                              eachPM[VMSET].add(opAdd[i,IDVM])
   120     46807     298066.0      6.4      0.0                              vm2pm[opAdd[i,IDVM]] = [j,opAdd[i,CPU],opAdd[i,MEM],whichNode]
   121
   122     46807     181260.0      3.9      0.0                              break
   123                                                                   else:
   124                                                                       pass # 看下一个物理机
   125                                                               else:
   126  22950488  118242982.0      5.2      9.9                          if eachPM[NODE_A][CPU] >= opAdd[i,CPU]/2 and eachPM[NODE_A][MEM] >= opAdd[i,MEM]/2                               and \
   127   1093271    5915430.0      5.4      0.5                              eachPM[NODE_B][CPU] >= opAdd[i,CPU]/2 and eachPM[NODE_B][MEM] >= opAdd[i,MEM]/                              2:
   128     31417     169336.0      5.4      0.0                              eachPM[NODE_A][CPU] -= opAdd[i,CPU]/2
   129     31417     145477.0      4.6      0.0                              eachPM[NODE_A][MEM] -= opAdd[i,MEM]/2
   130     31417     144884.0      4.6      0.0                              eachPM[NODE_B][CPU] -= opAdd[i,CPU]/2
   131     31417     143994.0      4.6      0.0                              eachPM[NODE_B][MEM] -= opAdd[i,MEM]/2
   132     31417     180119.0      5.7      0.0                              eachPM[VMSET].add(opAdd[i,IDVM])
   133     31417     219207.0      7.0      0.0                              vm2pm[opAdd[i,IDVM]] = [j,opAdd[i,CPU]/2,opAdd[i,MEM]/2]
   134     31417     115193.0      3.7      0.0                              break
   135                                                                   else:
   136  33418891  103239062.0      3.1      8.6                              pass # 看下一个物理机
   137                                                           else:
   138      1776      27487.0     15.5      0.0                      pm2vm.append(buyPM(matPM)) # TODO 判断是否一定放得下
   139      1776       9779.0      5.5      0.0                      j = len(pm2vm) - 1
   140      1776       7811.0      4.4      0.0                      if opAdd[i,NODE] == 0: # single node
   141      1094       6165.0      5.6      0.0                          pm2vm[j][NODE_A][CPU] -= opAdd[i,CPU]
   142      1094       4638.0      4.2      0.0                          pm2vm[j][NODE_A][MEM] -= opAdd[i,MEM]
   143      1094       5043.0      4.6      0.0                          pm2vm[j][VMSET].add(opAdd[i,IDVM])
   144      1094       6282.0      5.7      0.0                          vm2pm[opAdd[i,IDVM]] = [j,opAdd[i,CPU], opAdd[i,MEM], NODE_A]
   145                                                               else:
   146       682       3908.0      5.7      0.0                          pm2vm[j][NODE_A][CPU] -= opAdd[i,CPU]/2
   147       682       3289.0      4.8      0.0                          pm2vm[j][NODE_A][MEM] -= opAdd[i,MEM]/2
   148       682       3145.0      4.6      0.0                          pm2vm[j][NODE_B][CPU] -= opAdd[i,CPU]/2
   149       682       3159.0      4.6      0.0                          pm2vm[j][NODE_B][MEM] -= opAdd[i,MEM]/2
   150       682       3010.0      4.4      0.0                          pm2vm[j][VMSET].add(opAdd[i,IDVM])
   151       682       4307.0      6.3      0.0                          vm2pm[opAdd[i,IDVM]] = [j,opAdd[i,CPU]/2,opAdd[i,MEM]/2]
   152
   153                                                       '''
   154                                                       (purchase, 2) 本日物理机购买数目
   155                                                       (NV603, 1)
   156                                                       (NV604, 1)
   157                                                       (migration, 0) 迁移数目
   158                                                       (0, A) 部署
   159                                                       (0, B)
   160                                                       '''
   161
   162       800       2515.0      3.1      0.0              outPMTypeAll = '(purchase, %d)'
   163       800       2500.0      3.1      0.0              outPMType = '(%s, %d)'
   164       800       2584.0      3.2      0.0              outMigration = '(migration, %d)'
   165       800       2483.0      3.1      0.0              outDeploySingle = '(%d, %s)'
   166       800       2459.0      3.1      0.0              outDeployDouble = '(%d)'
   167
   168       800       4348.0      5.4      0.0              needtoBuy = len(pm2vm) - numPM
   169       800       2859.0      3.6      0.0              if needtoBuy == 0:
   170       126       6344.0     50.3      0.0                  print(outPMTypeAll % 0)
   171                                                       else:
   172       674      33070.0     49.1      0.0                  print(outPMTypeAll % 1)
   173
   174       674       7254.0     10.8      0.0                  print(outPMType % (targetPM,needtoBuy))
   175       800       2926.0      3.7      0.0              numPM = len(pm2vm)
   176
   177       800       6220.0      7.8      0.0              print(outMigration % 0)
   178
   179       800      67692.0     84.6      0.0              opAdd = opAdd[np.argsort(opAdd[:, ADD_INDEX])]
   180    136373     449679.0      3.3      0.0              for i in range(todayReq):
   181    135573     560854.0      4.1      0.0                  if opAdd[i,IDVM] == 0.0: # 排除掉初始化项
   182     55573     178575.0      3.2      0.0                      continue
   183     80000     372265.0      4.7      0.0                  if len(vm2pm[opAdd[i,IDVM]]) == 3:
   184     32099     276065.0      8.6      0.0                      print(outDeployDouble % vm2pm[opAdd[i,IDVM]][PM_INDEX])
   185                                                           else:
   186     47901     217045.0      4.5      0.0                      if vm2pm[opAdd[i,IDVM]][VM_NODE] == NODE_A: #
   187     23811     207917.0      8.7      0.0                          print(outDeploySingle % (vm2pm[opAdd[i,IDVM]][PM_INDEX],'A'))
   188                                                               else:
   189     24090     207942.0      8.6      0.0                          print(outDeploySingle % (vm2pm[opAdd[i,IDVM]][PM_INDEX],'B'))

